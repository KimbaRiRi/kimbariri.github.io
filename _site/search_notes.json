<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">

  

  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <meta name="description" content="My Brain Dumpster">

  <meta property="og:site_name" content="My Brain Dumpster">

  
  <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>/assets/img/favicon.png</text></svg>">
  


  <link rel="stylesheet" href="assets/css/style.css">

  
  <meta property="og:description" content="My Brain Dumpster">
  

  
  <meta property="og:title" content="My Brain Dumpster">
  <meta property="og:type" content="website">
  

  

  
  <meta property="og:url" content="http://localhost:4000/search_notes.json.html">
  

  

  <title>
    
     &mdash; My Brain Dumpster
    
  </title>
</head>

<body>
  <nav><div>
  <a class="internal-link" href="/"><b>My Brain Dumpster</b></a>
</div></nav>
  <main>[
  
    {

      "title"    : "How to use notenote.link features on your website",
      "url"      : "/how-to-use-the-special-features",
      "category" : "",
      "tags"     : "Theme",
      "content"  : "The default features\nAll the default jekyll markdown features are made available such that they don’t cause any conflict with the custom features that we have implemented.\nInternal links (simple and with alt-text) and LateX delimiters in markdown are compatible with\n[[\nObsidian::https://obsidian.md\n]]. I’d recommend using it as a CMS for managing your notes. See the page about Obsidian integration for more details.\nTo see how to the raw markdown gets generated, go to the Test page to see how the raw markdown is rendered\nThe Custom features\n1. Creating a wiki-style link\nGeneral Syntax\n\n\nInternal links: [​[​Some Link]]\n\n\nInternal links with alternative text: [​[​Some Link\\|Alt text]]\n\n\nExternal links: [​[​Some Text::https://address-to-the-website**]]**\n\n\nAnything text inside a double square bracket is considered as an internal link. The text has to be a valid title, if you provide a random text inside double square brackets, it will showup highlighted in yellow telling you that there is no essay/article/file with the mentioned title.\nSimilarly, for external links all you have to do is add a double colon after the “Alt text” and enter the link to the website after the double colon as seen below.\nExamples\nExample of an internal link that points to a valid post or page, that is, a page with the title (not url) mentioned in the double brackets.\n\nRaw Syntax: [​[​Obsidian integration]]\nRendered Text: Obsidian integration\n\nExample of an internal link that do not point to a valid post or page, that is, a page with the title (not url) mentioned in the double brackets.\n\nRaw Syntax: [​[Title of a non-existent page]]\nRendered Text:\n[[\nTitle of a non-existent page\n]]\n\n2. Creating a sidenote or a marginnote\nGeneral Syntax\n\n\nSidenote: [​[Some Text::keyword-of-the-type-of-the-sidenote]]\n\n\nMarginnote: [​[​Some Text**::keyword-of-the-type-of-the-marginnote]]**\n\n\n\n|Type of the sidenote/marginnote|keyword|\n|:–|:–|\n|Left Sidenote| lsn |\n|Right Sidenote | rsn |\n|Left Marginnote| lmn |\n|Right Marginnote | rmn |\n\nSo, all you have to do is type in the keywords of the corresponding type of sidenote or marginnote after the double colon in the above syntax\nExamples\nExample of a sidenote to the right side of the page:\n\nRaw Syntax: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec rutrum tortor in pharetra vehicula. Fusce gravida lacus ac sem luctus congue at id justo. Ut sed tempus ante. [​[Phasellus mollis lectus id efficitur mollis.::rsn]] Suspendisse sit amet diam nec justo rhoncus tristique. Ut blandit faucibus nisi vitae rutrum. Vivamus fermentum efficitur justo non facilisis.\nRendered Text: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec rutrum tortor in pharetra vehicula. Fusce gravida lacus ac sem luctus congue at id justo. Ut sed tempus ante.\n[[\nPhasellus mollis lectus id efficitur mollis.::rsn\n]] Suspendisse sit amet diam nec justo rhoncus tristique. Ut blandit faucibus nisi vitae rutrum. Vivamus fermentum efficitur justo non facilisis.\n\nSame goes with lsn, rmn, lmn\n3. Highlighting a piece of text\nGeneral Syntax\n\n[​[​Some Link::highlight]]\n\nThere is only one color right now in which it highlights, a light bluish color, but you can easily extend it to support multiple colors by tinkering with it in content.html file in _includes directory.\nExamples\n\nRaw Syntax: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec rutrum tortor in pharetra vehicula. Fusce gravida lacus ac sem luctus congue at id justo. Ut sed tempus ante. [​[Phasellus mollis lectus id efficitur mollis.::highlight]] Suspendisse sit amet diam nec justo rhoncus tristique. Ut blandit faucibus nisi vitae rutrum. Vivamus fermentum efficitur justo non facilisis.\nRendered Text: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec rutrum tortor in pharetra vehicula. Fusce gravida lacus ac sem luctus congue at id justo. Ut sed tempus ante.\n[[\nPhasellus mollis lectus id efficitur mollis.::highlight\n]] Suspendisse sit amet diam nec justo rhoncus tristique. Ut blandit faucibus nisi vitae rutrum. Vivamus fermentum efficitur justo non facilisis.\n\n4. Partial Transclusion\nTransclusion is just a natural extension of sidenote and marginnote feature.\nGeneral Syntax\n\n\nSidenote-transclusion: [​[Some Text::keyword-of-the-type-of-the-sidenote-transclusion]]\n\n\nMarginnote-transclusion: [​[​Some Text**::keyword-of-the-type-of-the-marginnote-transclusion]]**\n\n\n\n|Type of the sidenote/marginnote transclusion|keyword|\n|:–|:–|\n|Left Sidenote Transclusion | lsn-transclude |\n|Right Sidenote Transclusion | rsn-transclude |\n|Left Marginnote Transclusion | lmn-transclude |\n|Right Marginnote Transclusion | rmn-transclude |\n\nSo, all you have to do is type in the keywords of the corresponding type of sidenote or marginnote after the double colon in the above syntax\nExamples\nExample of a transclusion to the right side of the page:\n\nRaw Syntax: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec rutrum tortor in pharetra vehicula. Fusce gravida lacus ac sem luctus congue at id justo. Ut sed tempus ante. [​[Obsidian integration::rmn-transclude]] Suspendisse sit amet diam nec justo rhoncus tristique. Ut blandit faucibus nisi vitae rutrum. Vivamus fermentum efficitur justo non facilisis.\nRendered Text: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec rutrum tortor in pharetra vehicula. Fusce gravida lacus ac sem luctus congue at id justo. Ut sed tempus ante.\n[[\nObsidian integration::rmn-transclude\n]] Suspendisse sit amet diam nec justo rhoncus tristique. Ut blandit faucibus nisi vitae rutrum. Vivamus fermentum efficitur justo non facilisis.\n\nSame goes with rsn, lsn, lmn\n5. Wrapping a text inside a box\nGeneral Syntax\n\n[​[Some Text::wrap]]\n\nExamples\n\nRaw Syntax: [​[Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec rutrum tortor in pharetra vehicula. Fusce gravida lacus ac sem luctus congue at id justo. Ut sed tempus ante. Suspendisse sit amet diam nec justo rhoncus tristique. Ut blandit faucibus nisi vitae rutrum. Vivamus fermentum efficitur justo non facilisis::wrap]].\nRendered Text:\n[[\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Donec rutrum tortor in pharetra vehicula. Fusce gravida lacus ac sem luctus congue at id justo. Ut sed tempus ante. Suspendisse sit amet diam nec justo rhoncus tristique. Ut blandit faucibus nisi vitae rutrum. Vivamus fermentum efficitur justo non facilisis.::wrap\n]]\n\n6. Flashcard\nGeneral Syntax\n\n[​[Some Text::srs]]\n\nExamples\n\nRaw Syntax: Lorem ipsum dolor sit amet, consectetur adipiscing elit. [​[Donec rutrum tortor in pharetra vehicula::srs]]. Fusce gravida lacus ac sem luctus congue at id justo. Ut sed tempus ante. Suspendisse sit amet diam nec justo rhoncus tristique. Ut blandit faucibus nisi vitae rutrum. Vivamus fermentum efficitur justo non facilisis.\nRendered Text: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n[[\nDonec rutrum tortor in pharetra vehicula::srs\n]]. Fusce gravida lacus ac sem luctus congue at id justo. Ut sed tempus ante. Suspendisse sit amet diam nec justo rhoncus tristique. Ut blandit faucibus nisi vitae rutrum. Vivamus fermentum efficitur justo non facilisis.\n\n7. Specific classes for changing font-type, font-size, and font-weight\nThere are classes like very-small, medium-small, small, small-medium, medium, medium-large, large, very-large; that can be used to change the size of your text directly from markdown like this:\n\nRaw Syntax:\n{:.regular-sans}\n{:.large}\nSome text here that needs to be enlarged\n\nRendered Text:\n{:.large}\nSome text here that needs to be enlarged\n\nSimilarly there are classes like regular-sans, serif, bold, italic, oblique, bolder, etc for formatting the text.\n\nRaw Syntax:\n{:.medium .serif .oblique}\nSome text here that needs to be enlarged\n\nRendered Text:\n{:.medium .serif .oblique}\nSome text here that needs to be enlarged\n\nOther common classes are .boxit that is used to wrap the text, .disable-user-select to disallow users from being able to select a particular piece of text by selecting it, etc. There are more classes like these which you can see in the file style.css. Once you figure out which class to use, all you have to do is just add the class before the text you want inside a curl brace like this ​{:&lt;classnames-with-dot-prepended-to-them&gt;​}\n8. Table of Content\nnotenote.link supports automatic table of content (toc) generation. Just add a toc: true line in the front matter at the beginning of your post.\nYou can modify the maximum header level included in the toc by changing number in the following option in config.yml :\ntoc:\n  max_level: 3\n\n9. Note maturity\nSince this jekyll theme aims at mirroring your Obsidian notebook, the note content may note be mature or complete yet.\nTherefore, we use front matter to classify the notes in the following categories (in order of appearance in the front page feed) :\n\n\nseason: summer : the note is near-complete (more than 80% done)\n\nseason: spring : the note is in progress and has already good content\n\nseason: winter : the note has just started, a summary is present however.\n\nseason: automn : the note needs refactoring or some rewriting. It won’t appear in the front-page feed.\n\nWhy use seasons ? Since this theme is a form of ‘digital garden’, I thought it would make sense to keep the analogy.\n10. Other implicit features.\nFeatures like backlinks, context menu, related posts, page preview are available by default as they are implemented using CSS and JS. So, you don’t have to do anything other than write as you would normally to make use of those features."

    } ,
  
    {

      "title"    : "How to setup this site",
      "url"      : "/how-to-setup-this-site",
      "category" : "",
      "tags"     : "Theme",
      "content"  : "This is going to be a super simple post about how to setup and use this theme for your own website.\nSetup Prerequisites\nFor this tutorial, we’ll need to install a few things on your machine (you may have some of these already). Following the instructions on each website to install them.\n-\n[[\nRuby::https://www.ruby-lang.org/\n]]\n-\n[[\nRubyGems::https://rubygems.org/\n]]\n-\n[[\nGit::https://git-scm.com/downloads\n]]\nYou’ll also need to create accounts on the following services:\n-\n[[\nGitHub::https://www.github.com/join\n]] (to store the website)\n-\n[[\nNetlify::https://app.netlify.com/signup\n]] (to serve the website so others can see)\nOnce you are all set with the prerequisites, we can then get to the fun part of getting it to appear on your screen. Let’s get started with that.\n1. Create a fork of the template repository\nTo simplify things, I provide the template showed in the image above to get started. You can always tweak this template to your taste later.\nVisit the GitHub page for my template repository\n[[\nMaxence-L/notenote.link::https://github.com/Maxence-L/notenote.link\n]], and fork it to your account using the Fork button:\n\n\n\nOnce the forking process is complete, you should have a fork (essentially a copy) of my template in your own GitHub account. On the GitHub page for your repository, click on the green “Clone or download” button, and copy the URL: we’ll need it for the next step.\n2. Clone your repository locally\nNext, we want to download the files from your GitHub repository onto your local machine. To do this, replace &lt;YOUR_COPIED_URL_HERE&gt; in the command below with the URL you copied in the previous step, then execute this command:\n$ git clone &lt;YOUR_COPIED_URL_HERE&gt; my-personal-website\n\nAs a reference point, this is how it looks like for me (the difference is likely just the GitHub username):\n$ git clone git@github.com/Maxence-L/notenote.link my-personal-website\n\nThen, navigate into the directory that was just created:\n$ cd my-personal-website\n\n3. Test out the site locally\nSweet! You now have your repository’s source code on your machine. Within the my-personal-website directory, run the following command to install the necessary dependencies like Jekyll:\n$ bundle\n\nOnce that’s done, ask Jekyll to start serving the site locally:\n$ bundle exec jekyll serve\n\nThen, open up\n[[\nhttp://localhost:4000::http://localhost:4000\n]] in your browser.\nIf everything’s done correctly, you should now see the home page of your Personal Jekyll Website with notenote.link Theme. 🎉\nKeep in mind that this site is only available locally (notice the localhost part of the URL), so if we want it to be available on the Internet for everyone to enjoy, we need to deploy it to the Internet: we’ll use Netlify for that in the next step.\n4. Connect your GitHub repository to Netlify\nNetlify lets you automatically deploy your personal website on to the Internet when you update your GitHub repository. To do this, we need to connect your GitHub repository to Netlify:\n\nLog in to Netlify\nOnce logged in, click the “New site from Git” button\nOn the next page, select GitHub as the continuous deployment provider (you may need to authorize the connection, in which case, approve it)\nOn the next page, select your website repository from the list.\nOn the next page, replace the basic build settings with the following.\n\nType in “jekyll build” (without the quotes) inside the text field titled “Build Command”.\nSimilarly type in “_site/” (without the quotes) inside the text field titled “Publish Directory”.\n\n\nOn the next page, keep the default settings, and click on “Deploy site”.\n\nThat was easy! We’re almost done.\nWait a couple of minutes for the initial deploy to complete.\nOnce that’s done, your website should be available on the Internet via a generic Netlify URL, which you can change to a custom domain later if you’d like.\nNow the cool thing is this: whenever you push an update to your GitHub repository, Netlify will automatically deploy your updates to the Internet.\n5. Start producing content :\nAt this point, you can start updating the files on your machine (in the my-personal-website folder) to change your jekyll seamless based website to your liking: update the copy, add some notes, tweak the layout, customize the colors, etc. Once you have something you’re happy with, push your changes to your GitHub repository with the following commands:\n$ git add --all\n$ git commit -m 'Update content'\n$ git push origin master\n\nIf that command succeeds and the rest of the tutorial was done correctly, in a couple of minutes, you should see your changes live on your Netlify website. 🚀\nAnd we’re done! You now have your own notenote.link based Personal Website .\n– About This Site –\nLink syntax\nTo link to another note, you can use multiple syntaxes. The following four use the “double-bracket” notation (view the Markdown source file to see the underlying syntax).\n\nUsing the note title variable:\n[[\na note about cats\n]]\n\nUsing the note’s filename:\n[[\ncats\n]]\n\nUsing the note’s title, with a label:\n[[\ncats|link to the note about cats using the note title\n]]\n\nUsing the note’s filename, with a label:\n[[\ncats|link to the note about cats using the note’s filename\n]]\n\n\nIn all cases, if the double-bracket link does not point to a valid note, the double brackets will still be shown, like this:\n[[\nthere is no note that matches this link\n]].\nAlternatively, you can use regular Markdown syntax for links.\nSince the Web is all about HTML, you can always use plain HTML if you want, like this: This is a link to the note about cats with HTML. Don’t forget to use the .internal-link class to make sure the link is styled as an internal link (without the little arrow).\nOf course, you can also link to external websites, like this: this is a link to Wikipedia. Again, you can use plain HTML if you prefer. Footnotes are also supported and will be treated like internal links.1\nSite configuration\nSome behavior is configurable by tweaking the _config.yml file.\nfavicon: Insert an emoji and this will be generated as your site’s favicon automatically! This is only supported by browsers that recognize svg favicons, which is the majority of modern browsers.\nuse_html_extension: if you use a static host that doesn’t support URLs that don’t end with .html (such as Neocities or Dreamhost), leave this as true in the _config.yml file. If you configure your .htaccess to remove extensions, remember to add link metadata for canonical URLs.\nopen_external_links_in_new_tab: when set to true, this makes external links open in new tabs. Set to false to open all links in the current tab.\nurl: Set to your full web URL including https://\ntimezone: Set to your desired posting timezone so that the Last Modified At plugin displays the right date when you edit files.\nPages\nSave static pages in the root directory in .md format. Each page needs to have the following at the top:\n---\nlayout: page\ntitle: About\n---\n\nAutomatic bi-directional links\nNotice in the “Notes mentioning this note” section that there is another note linking to this note. This is a bi-directional link, and those are automatically created when you create links to other notes.\nLink previews\nIf you’re on a device with mouse support, try hovering your mouse on internal links to preview the notes:\n[[\na note about cats\n]].\nImages and other Markdown goodies\nFinally, because you have the full power of Markdown in this template, you can use regular Markdown syntax for various formatting options.\nLists work as expected:\n\nList element A\nList element B\nList element C\n\n\nList element\nList element\nList element\n\nIf you’d like to quote other people, consider using quote blocks:\n\nLorem ipsum dolor sit amet\n\nAnd of course, images look great:\n\nCode syntax highlighting\nYou can add code blocks with full syntax color highlighting by wrapping code snippet in triple backticks and specifying the type of the code (js, rb, sh, etc.):\n// Here's a bit of JavaScript:\nconsole.log('hello!')\n\n# And now some Ruby\ndef foo(bar)\n  \"baz\"\nend\n\n$ cat /dev/urandom | grep \"the answer to life\" # shell scripts look nice too\n\nArchive\nThe archive page displays all notes in reverse chronological order. Design is inspired by https://maximevaillancourt.com/blog.\nArchive page includes:\n\nNote title with link to note\nNote category\nMonth and Year modified\nExcerpt\n\nInstallation\n\nCreate new respository from the Github Template by clicking “Use this template”\nCustomize _config.yml\n\nSign up for DeployHQ\n\nConnect Github repository to DeployHQ\nAdd your server’s FTP or SSH information\nConfigure Jekyll Build Commands on DeployHQ and turn vendor caching on\nDeploy!\n\nOptional:\n[[\nObsidian Setup\n]]\nLicense\nThis digital garden template is free and open-source. It runs on Apache/PHP servers and the Github code is available here. This version of the code was modified by Megumi Tanaka in 2021.\nBased on this digital garden template, running on Netlify, created by Maxime Vaillancourt.  Buy the original creator a coffee! ☕️\nGo forth, have fun, and learn new something every day! ✌️\nFootnotes\n\n\n\nThis is a footnote. For more information about using footnotes, check out the Markdown Guide. ↩"

    } ,
  
    {

      "title"    : "Note formatting",
      "url"      : "/note-formatting",
      "category" : "Getting Started",
      "tags"     : "",
      "content"  : "Front Matter\nAt the top of each new note, you must include the triple dashes that make up Jekyll Front Matter.\n---\n---\n\nIf you forget to add this to a note, it’s no big deal! Maxime wrote a plugin called empty_front_matter_note_injector.rb which adds these dashes before building the site.\nNote Title\nThe title of the .md file will automatically become the note title heading, rendered as an &lt;h1&gt;. Keeping this in mind, start your note content from &lt;h2&gt; or ##.\nTitle Override\nUse variable title: in the front matter to create a note title that is different from the filename.\n---\ntitle: A note about cats\n---\n\nIn the example above, the filename is cats.md but the longer title shows up in the note’s heading and &lt;title&gt;. See it live at\n[[\ncats\n]].\nCategories\nTo add a category, add the following to your note front matter:\ncategory: Cats\nThe archive page automatically displays all notes and their categories (if any). Categories display underneath note title, if they are not null. Eventually I want to make these clickable. Inspired by Low Tech Mag’s Archive Page.\nFavicon\nTo override the site favicon on a page level basis, use this variable:\nfavicon: 🐈\nType an emoji directly in your .md file and it will replace your favicon for that page only!\nInternal Links\nBy default, all links created with &lt;a&gt; will show up as external links, open in new window, and display a small arrow.\nFor internal links, add class=\"internal-link\" to the HTML.\nUnfortunately, {: .internal-link} stopped working when I switched to Commonmark.\nGithub Flavored Markdown\nThis site uses Commonmark Github Flavored Markdown, which replaces the default Kramdown functionality. Read the Github Markdown Documentation.\nMost importantly, you can create tables that are compatible with Obsidian and Github:\n\n\n\nfoo\nbar\n\n\n\n\nbaz\n\n\n\n[[\n\n\n\ncats\n\n\n\n]]\n\n\n\n\nThe table above was created with this markup:\n| foo | bar |\n| --- | --- |\n| baz | [[cats]] |\n\nMore info in the GFM Documentation\nOther options you can add to Commonmark in _config.yml:\nValid options: DEFAULT, VALIDATE_UTF8, SMART, LIBERAL_HTML_TAG, FOOTNOTES, STRIKETHROUGH_DOUBLE_TILDE, SOURCEPOS, HARDBREAKS, SAFE, NOBREAKS, GITHUB_PRE_LANG, TABLE_PREFER_STYLE_ATTRIBUTES, FULL_INFO_STRING\n\nNote that an inline code block created with `` has text wrapping, while preformatted blocks created with ``` do not.\nDescription of each option here\nTypographic Symbols\n“Smart” quotes are automatically generated with Commonmark, but the typographic options are documented in Kramdown, the built in Jekyll Markdown parser.\n\n\n--- will become an em-dash (like this —)\n\n-- will become an en-dash (like this –)\n\n... will become an ellipsis (like this …)\n\n&lt;&lt; will become a left guillemet (like this «) – an optional following space will become a non-breakable space\n\n&gt;&gt; will become a right guillemet (like this ») – an optional leading space will become a non-breakable space\n\nFootnotes\nIf you create footnotes, you’ll need to add a heading for Footnotes at the bottom of your note manually (for now)"

    } ,
  
    {

      "title"    : "Obsidian integration",
      "url"      : "/obsidian-integration",
      "category" : "",
      "tags"     : "CMS",
      "content"  : "The main purpose of this fork, other than cosmetic changes, is to create a web representation of an\n[[\nObsidian::https://obsidian.md\n]] vault, using the\n[[\nSimply-Jekyll::https://github.com/raghuveerdotnet/simply-jekyll\n]] template.\nUsage\nThings to know :\n\n\nMarkdown is fully-compatible (including Latex delimiters !)\n\n\nThere are now only notes (no blog posts). If you really want blog posts along notes, a hack is to set the YAML season of blog posts to summer and notes to automn - they won’t appear in feed but will be searchable and appear in tags page.\n\n\nCode is now correctly indented\n\n\nYou can change the code template by replacing the css in /assets/css/highlight.css by any template from\n[[\npygment.css::https://github.com/richleland/pygments-css\n]]\n\n\nWikilinks are usable : [​[​…]],\n\n\nAlso alt-text wikilinks (with transclusion !) : [​[​original link\\|alternative text]]\n\n\nPlease note : You need to escape the pipe character in Obsidian (\\| instead of |). This won’t break Obsidian’s functionality.\n\n\nFresh new feature : you can also link headers ! Use # when typing the wikilink : [​[Obsidian integration#Obsidian setup|Alt-text]] will create the following link :\n[[\nObsidian integration#Obsidian setup|Alt-text\n]] (click on it to see the effect)\n\nPlease note : This feature will work only if you write alternative text in the link :\n[[\nObsidian integration#Obsidian setup\n]] won’t work1.\n\nYou can use\n[[\nSimply-Jekyll custom features::https://simply-jekyll.netlify.app/posts/exploring-the-features-of-simply-jekyll\n]], such as flashcards :\n[[\nflashcards !::srs\n]] - but don’t click on it in Obsidian, else it will create a new page.\n\nObsidian setup\nInstallation\nAfter having forked\n[[\nnotenote.link::https://github.com/Maxence-L/notenote.link\n]] on your computer, open Obsidian and create a vault in the root folder (/notenote.link).\nThis will allow you to modify all your markdown files inside the directory.\nabout.md is in the root folder.\nYour notes should go to the _notes folder, images in assets/img. You need to tell Obsidian where to put the new notes. In Preferences/File, enter the following settings :\n\n\nDefault location for new notes : In the folder specified below`\nFolder to create new notes in : _notes\n\nNew link format : Relative Path to file\n\nAttachment folder path : `assets/img\n\nFrontmatter\nFront matter is needed at the beginning of your note. Here is the template :\n---\ntitle: My Note\ntags: tag1\ntoc: true\nseason: winter\n---\n\nYou can hide it in Obsidian by toggling the option “Show Frontmatter” in the Preferences/Editor menu.\nImages\nImages are the tricky part :\n\nYou can use vanilla markdown links: ![](/asset/img/img.png)\n\nYou can drag/drop/paste images in Obsidian, which will create a link such as : [​[​../assets/img/Pasted image.png]]\n\n\nA quick hack in the last case is just to change the brackets : ![](../assets/img/Pasted image.png)\n\n\n\nI don’t use it, so I didn’t change it but if it’s important for you open an issue and I may fix it. ↩"

    } ,
  
    {

      "title"    : "Obsitidan setup",
      "url"      : "/obsitidan-setup",
      "category" : "Getting Started",
      "tags"     : "",
      "content"  : "Vault\nOpen new folder as vault and select the main digital garden folder.\nSettings\n.gitignore is set to ignore Obsidian system files, so you need to customize the settings from scratch.\nFiles &amp; Links\n\nSet default location for new notes to _notes\n\nSet default location for attachments to assets/images\n\nBe careful not to select _site/assets. Instead, select the folder in your root directory.\n\n\nFor static pages like about.md, drag to _pages directory\n\nMore on this in\n[[\nSite Organization\n]]\n\n\n\n\nMake sure you’re working on notes in the _notes directory, not _site. Unfortunately, you’ll just have to put up with all the extra files in your Obsidian view since we can’t ignore Obsidian folders yet.\nWikilinks\nBy default, Obsidian uses wikilinks, or double bracketed links. They look [[like this]]. If you keep wikilinks enabled, you’ll also use proprietary Obsidian wiki embeds for images. They look like this: ![[image.png]]\nThis is not standard Markdown! So I wrote an update to the bidirectional links generator script that updates this to the proper HTML code.\nHere’s a test image to make sure my plugin is working:\n\nRead more about my fix at\n[[\nWiki Image Link Testing\n]]\nTemplate Plugin\nThis is a core Obsidian plugin that is turned off by default.\n\nUnder Core Plugins, enable “Templates”\nSelect obsidian-templates as the template folder\nSet a hotkey for inserting a template to a file\nSelect note or page templates to insert front matter and variables\n\nSuggested Plugins\nThese are community plugins built by independent developers.\n\nWikilinks to MDLinks\nPaste URL Into Selection\nEmoji Toolbar\n\nAdvanced Tables](&lt;—\ncategory: Getting Started\nfavicon: 💎\n\n\nVault\nOpen new folder as vault and select the main digital garden folder.\nSettings\n.gitignore is set to ignore Obsidian system files, so you need to customize the settings from scratch.\nFiles &amp; Links\n\nSet default location for new notes to _notes\n\nSet default location for attachments to assets/images\n\nBe careful not to select _site/assets. Instead, select the folder in your root directory.\n\n\nFor static pages like about.md, drag to _pages directory\n\nMore on this in\n[[\nSite Organization\n]]\n\n\n\n\nMake sure you’re working on notes in the _notes directory, not _site. Unfortunately, you’ll just have to put up with all the extra files in your Obsidian view since we can’t ignore Obsidian folders yet.\nWikilinks\nBy default, Obsidian uses wikilinks, or double bracketed links. They look [[like this]]. If you keep wikilinks enabled, you’ll also use proprietary Obsidian wiki embeds for images. They look like this: ![[image.png]]\nThis is not standard Markdown! So I wrote an update to the bidirectional links generator script that updates this to the proper HTML code.\nHere’s a test image to make sure my plugin is working:\n\nRead more about my fix at\n[[\nWiki Image Link Testing\n]]\nTemplate Plugin\nThis is a core Obsidian plugin that is turned off by default.\n\nUnder Core Plugins, enable “Templates”\nSelect obsidian-templates as the template folder\nSet a hotkey for inserting a template to a file\nSelect note or page templates to insert front matter and variables\n\nSuggested Plugins\nThese are community plugins built by independent developers.\n\nWikilinks to MDLinks\nPaste URL Into Selection\nEmoji Toolbar\n\nAdvanced Tables&gt;)](&lt;—\ncategory: Getting Started\nfavicon: 💎\n\n\nVault\nOpen new folder as vault and select the main digital garden folder.\nSettings\n.gitignore is set to ignore Obsidian system files, so you need to customize the settings from scratch.\nFiles &amp; Links\n\nSet default location for new notes to _notes\n\nSet default location for attachments to assets/images\n\nBe careful not to select _site/assets. Instead, select the folder in your root directory.\n\n\nFor static pages like about.md, drag to _pages directory\n\nMore on this in\n[[\nSite Organization\n]]\n\n\n\n\nMake sure you’re working on notes in the _notes directory, not _site. Unfortunately, you’ll just have to put up with all the extra files in your Obsidian view since we can’t ignore Obsidian folders yet.\nWikilinks\nBy default, Obsidian uses wikilinks, or double bracketed links. They look [[like this]]. If you keep wikilinks enabled, you’ll also use proprietary Obsidian wiki embeds for images. They look like this: ![[image.png]]\nThis is not standard Markdown! So I wrote an update to the bidirectional links generator script that updates this to the proper HTML code.\nHere’s a test image to make sure my plugin is working:\n\nRead more about my fix at\n[[\nWiki Image Link Testing\n]]\nTemplate Plugin\nThis is a core Obsidian plugin that is turned off by default.\n\nUnder Core Plugins, enable “Templates”\nSelect obsidian-templates as the template folder\nSet a hotkey for inserting a template to a file\nSelect note or page templates to insert front matter and variables\n\nSuggested Plugins\nThese are community plugins built by independent developers.\n\nWikilinks to MDLinks\nPaste URL Into Selection\nEmoji Toolbar\n\nAdvanced Tables&gt;)"

    } ,
  
    {

      "title"    : "Site organisation",
      "url"      : "/site-organisation",
      "category" : "Getting Started",
      "tags"     : "",
      "content"  : "Pages vs Notes\nSite content is separated into two main categories:\n\n\nPages are static pages such as about.md, saved in the _pages directory\n\nNotes are your connected knowledge, saved in _notes directory\n\nBoth notes and pages support wikilinks. When you build your site, these markdown files are converted to html and exported to the _site directory, which makes up your live website.\nPage Exceptions\nindex.md is saved in the root directory so that I can use an include to README.md and avoid having to write the same content twice. Feel free to move this to _pages if you remove the include—the page will still render in the root directory once you build the site.\nNote Features\nSince the notes are set up as a Jekyll collection rather than a post item, you cannot use built in category or tag features. The advantage of this is being able to name your note anything you want, rather than adhering to Jekyll’s requirement to add the date to a post filename.\nSince notes are technically a collection of pages, you can create your own variables. I’ve configured a custom variable called category: that you can use on notes. More info in Note Formatting.\nAssets\nAll assets must be saved in the assets directory or they will not be built by Jekyll. By default, the Assets folder contains the following subfolders:\n\ncss\nimages\njs\n\nSave all attachments to the assets/images directory. More on this in\n[[\nObsidian Setup\n]].\nNote Naming\nYou can use dashes in your note names, like this:\n[[\nyour-first-note\n]]\nI applied the fix in this issue to make this possible.\nStyle\nThe site theme is controlled by css/style.css. Read documentation on the current theme in Style &amp; Theme.\nLocal Environment\nIf you want to set up Jekyll on your local environment, I recommend following this guide. It covers Git, Ruby, homebrew, and why you shouldn’t use sudo for everything.\nMaxime’s tutorial also has a great section on setting up your local environment."

    } ,
  
    {

      "title"    : "Style &amp; theme",
      "url"      : "/style-theme",
      "category" : "Development",
      "tags"     : "",
      "content"  : "I’m writing these notes as I start to develop the custom CSS for this template.\nI’m removing the SCSS because I’m a big fan of pure CSS variables. I’m also removing normalize.css because it was last updated in 2018, and a lot has changed since then. I’m a bit of a minimalist when it comes to CSS and working with browser defaults.\nThe new stylesheet will live in assets/css, organized according to the Jekyll documentation. I also added an empty js folder just in case and an images folder for attachments. This way all assets are automatically built to _site without the need for additional configuration.\n\nMoved all notes-graph CSS to the main stylesheet\n\nuses --primary-color variable\n\n\nMoved notes-graph js to assets/js\n\n\nTypefaces\nI chose Inter and Wremena. Inter is the UI typeface for Obsidian, and the variable font version has lots of fun features.\nFor dates, I’ve enabled alternate numbers, slashed zeroes, and case sensitive forms. I’ve also enabled superscript, fractions, and disambiguation glyph set by default.\nWremena is used for headings. I’ve enabled tabular numbers, just in case you add some numbers to your note titles.\nCSS Changelog\n\nBody has a max width now\nFont size is calculated to be intrinsically responsive\nNo more inline styles, everything has a class or unique element\nSemantic HTML, removed deprecated tags\n\nRearranged &lt;article&gt; to only contain article text and nothing more\nBacklinks are now an &lt;aside&gt;\n\n\n\nSeparated font embeds to fonts.css\n\nHeadings have hyphenated word breaks for large text on small devices\nIncreased width for breakpoint to avoid squished grids\nLots of variables in :root based on reducing opacity for the same primary theme color\nAdded display: grid liberally when codeblocks broke the grid"

    } ,
  
    {

      "title"    : "Test page to see how the raw markdown is rendered",
      "url"      : "/how-markdown-is-rendered",
      "category" : "",
      "tags"     : "markdown",
      "content"  : "This is intended as a quick reference and showcase.\nTable of Contents\n-\n[[\nHeaders::#heading\n]]\n-\n[[\nEmphasis::#emphasis\n]]\n-\n[[\nLists::#lists\n]]\n-\n[[\nLinks::#links\n]]\n-\n[[\nImages::#images\n]]\n-\n[[\nCode and Syntax Highlighting::#syntax\n]]\n-\n[[\nMath Expressions::#math\n]]\n-\n[[\nTables::#tables\n]]\n-\n[[\nBlockquotes::#blockquotes\n]]\n-\n[[\nInline HTML::#inline\n]]\n-\n[[\nHorizontal Rule::#hr\n]]\n\n[[Line Breaks::#br]]\n\n{:#heading}\nHeadings\n\n{:.regular-sans}\n# H1 \n## H2 \n### H3 \n#### H4 \n##### H5 \n###### H6\n\nH1\nH2\nH3\nH4\nH5\nH6\n{:#emphasis}\nEmphasis\n\n{:.regular-sans}\nEmphasis, aka italics, with *asterisks* or _underscores_. \n\nStrong emphasis, aka bold, with **asterisks** or __underscores__. \n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~ \n\nEmphasis, aka italics, with asterisks or underscores.\nStrong emphasis, aka bold, with asterisks or underscores.\nCombined emphasis with asterisks and underscores.\nStrikethrough uses two tildes. Scratch this.\n{:#lists}\nLists\n{:.regular-sans}\n1. First ordered list item \n...1. Ordered sublist \n2. Another item \n...* Unordered sublist \n3. Actual numbers don't matter, just that it's a number \n4. And another item. \n\n⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown). \n\n⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ \n⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅ \n⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.) \n\n* Unordered list can use asterisks \n- Or minuses\n+ Or pluses\n\n\n\nFirst ordered list item\n\nOrdered sublist\n\n\n\nAnother item\n\nUnordered sublist\n\n\n\nActual numbers don’t matter, just that it’s a number\n\n\nAnd another item.\nYou can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).\nTo have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅\nNote that this line is separate, but within the same paragraph.⋅⋅\n(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n\n\nUnordered list can use asterisks\n\n\nOr minuses\n\n\nOr pluses\n\n{:#links}\nLinks\n\n{:.regular-sans}\n[I'm an inline-style link](https://www.google.com)\n\n[I'm an inline-style link with title](https://www.google.com \"Google's Homepage\")\n\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs and URLs in angle brackets will automatically get turned into links. \nhttp://www.example.com or &lt;http://www.example.com&gt; and sometimes \nexample.com (but not on Github, for example).\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com\n\nI’m an inline-style link\nI’m an inline-style link with title\nI’m a reference-style link\nI’m a relative reference to a repository file\nYou can use numbers for reference-style link definitions\nOr leave it empty and use the link text itself.\nURLs and URLs in angle brackets will automatically get turned into links.\nhttp://www.example.com or http://www.example.com and sometimes\nexample.com (but not on Github, for example).\nSome text to show that the reference links can follow later.\n{:#images}\nImages\n\n{:.regular-sans}\nHere's our logo (hover to see the title text):\n\nInline-style: \n![alt text](/assets/img/profile.png \"Logo Title Text 1\")\n\nReference-style: \n![alt text][logo]\n\n[logo]: /assets/img/profile.png \"Logo Title Text 2\"\n\nHere’s our logo (hover to see the title text):\nInline-style:\n![alt text](/assets/img/profile.png \"Logo Title Text 1\")\n\n\nReference-style:\n![alt text][logo]\n \n [logo]: /assets/img/profile.png \"Logo Title Text 2\"\n\n\nYou can center the picture by adding #center at the end of the image path :\n![alt text](/assets/img/profile.png#center \"Logo Title Text 1\")\n\n\n{:#syntax}\nCode and Syntax Highlighting\n\nCode blocks are part of the Markdown spec, but syntax highlighting isn’t. However, many renderers – like Github’s and Markdown Here – support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. Markdown Here supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers);\n{:.regular-sans}\nInline `code` has `back-ticks around` it.\n\nInline code has back-ticks around it.\nBlocks of code are either fenced by lines with three back-ticks ```, or are indented with four spaces. I recommend only using the fenced code blocks – they’re easier and only they support syntax highlighting.\n \n\n```javascript\nvar s = \"JavaScript syntax highlighting\";\nalert(s);\n```\n \n```python\ns = \"Python syntax highlighting\"\nprint s\n```\n \n```\nNo language indicated, so no syntax highlighting. \nBut let's throw in a tag.\n```\n\n\nvar s = \"JavaScript syntax highlighting\";\nalert(s);\n\ns = \"Python syntax highlighting\"\nprint s\n\nNo language indicated, so no syntax highlighting. \nBut let's throw in a &lt;b&gt;tag&lt;/b&gt;.\n\n{:#math}\nMath expressions\n\nYou can write math expressions using the Latex markup language between dollar signs.\nThey can be written inline (single-dollar signs $...$) or as a whole block (double dollar signs with a line above and under $$...$$).\nFor example,\nBayes Theorem is $P(A \\vert B) = \\frac{P(B \\vert A)\\cdot P(A)}{P(B)}$\n\nwill render as :\nBayes Theorem is : $P(A \\vert B) = \\frac{P(B \\vert A)\\cdot P(A)}{P(B)}$\nWhereas\nBayes Theorem is :\n\n$$P(A \\vert B) = \\frac{P(B \\vert A)\\cdot P(A)}{P(B)}$$\n\n\nwill render as :\nBayes Theorem is :\n$$P(A \\vert B) = \\frac{P(B \\vert A)\\cdot P(A)}{P(B)}$$\nPlease note that for a math block to be displayed correctly, it needs to be separated by an empty line, above and below. Besides, the pipe character | may conflict with Markdown : it is recommended to use \\vert instead.\n{:#tables}\nTables\n\nTables aren’t part of the core Markdown spec, but they are part of GFM and Markdown Here supports them. They are an easy way of adding tables to your email – a task that would otherwise require copy-pasting from another application.\n{:.regular-sans}\nColons can be used to align columns.\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\nThere must be at least 3 dashes separating each header cell.\nThe outer pipes (|) are optional, and you don't need to make the \nraw Markdown line up prettily. You can also use inline Markdown.\n\nMarkdown | Less | Pretty\n--- | --- | ---\n*Still* | `renders` | **nicely**\n1 | 2 | 3\n\nColons can be used to align columns.\n\n\n\nTables\nAre\nCool\n\n\n\n\ncol 3 is\nright-aligned\n$1600\n\n\ncol 2 is\ncentered\n$12\n\n\nzebra stripes\nare neat\n$1\n\n\n\nThere must be at least 3 dashes separating each header cell.\nThe outer pipes (|) are optional, and you don’t need to make the\nraw Markdown line up prettily. You can also use inline Markdown.\n\n\n\nMarkdown\nLess\nPretty\n\n\n\n\nStill\nrenders\nnicely\n\n\n1\n2\n3\n\n\n\n{:#blockquotes}\nBlockquotes\n\n{:.regular-sans}\n&gt; Blockquotes are very handy in email to emulate reply text.\n&gt; This line is part of the same quote.\n\nQuote break.\n\n&gt; This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.\n\n\nBlockquotes are very handy in email to emulate reply text.\nThis line is part of the same quote.\n\nQuote break.\n\nThis is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote.\n\n{:#inline}\nInline HTML\nYou can also use raw HTML in your Markdown, and it’ll mostly work pretty well.\n{:.regular-sans}\n&lt;dl&gt;\n  &lt;dt&gt;Definition list&lt;/dt&gt;\n  &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt;\n\n  &lt;dt&gt;Markdown in HTML&lt;/dt&gt;\n  &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;\n&lt;/dl&gt;\n\nYou can also use raw HTML in your Markdown, and it’ll mostly work pretty well.\n\n  Definition list\n  Is something people use sometimes.\n  Markdown in HTML\n  Does *not* work **very** well. Use HTML tags.\n\n{:#hr}\nHorizontal Rule\n\n{:.regular-sans}\nThree or more...\n\n---\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores\n\nThree or more…\n\nHyphens\n\nAsterisks\n\nUnderscores\n{:#br}\nLine Breaks\n\nMy basic recommendation for learning how line breaks work is to experiment and discover – hit  once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You’ll soon learn to get what you want. “Markdown Toggle” is your friend.\nHere are some things to try out:\n{:.regular-sans}\nHere's a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\n\nThis line is also a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the *same paragraph*.\n\nHere’s a line for us to start with.\nThis line is separated from the one above by two newlines, so it will be a separate paragraph.\nThis line is also a separate paragraph, but…\nThis line is only separated by a single newline, so it’s a separate line in the same paragraph.\nLicense: CC-BY"

    } ,
  
    {

      "title"    : "About this page",
      "url"      : "/about-this-page",
      "category" : "Introduction",
      "tags"     : "CMS,, personal,, digital, garden",
      "content"  : "Welcome!\nThis is my first note of this website. This website is based from Obsidian and Megumi’s Green Template. Heavily inspired by Maggie’s Digital Gardening Project.\nThis website is currently being hosted on Github. The reason is that:\n\nIt’s free.\nAs I am actively pushing my updates to my own github, it just makes sense to deploy directly to Github.\nI couldn’t find any valid reason to deploy through Netflify or Vercel. I may consider it in future- I don’t know. This whole Obsidian syncing to Jekyll thing is very experimental to me.\n\nOriginally, I was publishing my personal website with the Gatsby integrating with WordPress on headless CMS way. However, figuring out how incorporate the Gatsby way with WP API was too much hustles. If this was required by my work, I will do it (well because I am paid for it). For the personal website? That’s too much. The consistent updates and checking the dependencies on node &amp; npm version was exhausting me out as well.\nNext Milestone is…\n\n[WIP] Start migrating css to scss format\n[WIP ] Add 2nd post\n[ ] Start migrating all js within html pages and markdowns within organised folder structures\n[ ] Configure the Obsidian biredirect link into based on the folder structure\n[ ] Adding Search Option\n[ ] Figuring out the Wiki stacks within this website\n[ ] Add a comments plugin (Disqus)\n[ ] Install a remote theme\n[ ] Learn how to add gists to the posts\n[ ] Add reading time to posts\n[ ] Install a plugin to speed up post creation (jekyll-compose)\n[ ] Try out the static comments option"

    } ,
  
    {

      "title"    : "Roadmap",
      "url"      : "/roadmap/",
      "category" : "",
      "tags"     : "",
      "content"  : "Milestones:\n\n1st May 2022: Deployment of the blog to Github Pages\n??????: First 5 posts\n??????: First 5 comments\n\nTO DOs\n\n[x] Create aliases for Jekyll commands\n[ ] Add 2nd post\n[x] Add a comments plugin (Disqus)\n[x] Install a remote theme\n[ ] Learn how to add gists to the posts\n[x] Add reading time to posts\n[ ] Install a plugin to speed up post creation (jekyll-compose)\n[ ] Try out the static comments option"

    } 
  
]</main>
  <footer><p>This is the footer. Here's the <a class="internal-link" href="about.html">About</a> page and the <a class="internal-link" href="archive.html">Archive</a>.</p></footer>

  <!-- That file is not particularly elegant. This will need a refactor at some point. -->
<style>
  content a.internal-link {
    border-color: #8b88e6;
    background-color: #efefff;
  }

  #tooltip-wrapper {
    background: white;
    padding: 1em;
    border: 1px solid #ddd;
    border-radius: 4px;
    overflow: hidden;
    position: absolute;
    width: 400px;
    height: 250px;
    font-size: 0.8em;
    box-shadow: 0 5px 10px rgba(0,0,0,0.1);
    opacity: 0;
    transition: opacity 100ms;
  }

  #tooltip-wrapper:after {
		content: "";
		position: absolute;
		z-index: 1;
		bottom: 0;
		left: 0;
		pointer-events: none;
		background-image: linear-gradient(to bottom, rgba(255,255,255, 0), rgba(255,255,255, 1) 90%);
		width: 100%;
		height: 75px;
  }
</style>

<div style="opacity: 0; display: none;" id='tooltip-wrapper'>
  <div id='tooltip-content'>
  </div>
</div>

<iframe style="display: none; height: 0; width: 0;" id='link-preview-iframe' src="">
</iframe>

<script>
  var opacityTimeout;
  var contentTimeout;
  var transitionDurationMs = 100;

  var iframe = document.getElementById('link-preview-iframe')
  var tooltipWrapper = document.getElementById('tooltip-wrapper')
  var tooltipContent = document.getElementById('tooltip-content')

  function hideTooltip() {
    opacityTimeout = setTimeout(function() {
      tooltipWrapper.style.opacity = 0;
      contentTimeout = setTimeout(function() {
        tooltipContent.innerHTML = '';
        tooltipWrapper.style.display = 'none';
      }, transitionDurationMs + 1);
    }, transitionDurationMs)
  }

  function showTooltip(event) {
    var elem = event.target;
    var elem_props = elem.getClientRects()[elem.getClientRects().length - 1];
    var top = window.pageYOffset || document.documentElement.scrollTop

    if (event.target.host === window.location.host) {
      iframe.src = event.target.href
      iframe.onload = function() {
        tooltipContentHtml = ''
        tooltipContentHtml += '<div style="font-weight: bold;">' + iframe.contentWindow.document.querySelector('h1').innerHTML + '</div>'
        tooltipContentHtml += iframe.contentWindow.document.querySelector('content').innerHTML

        tooltipContent.innerHTML = tooltipContentHtml

        tooltipWrapper.style.display = 'block';
        setTimeout(function() {
          tooltipWrapper.style.opacity = 1;
        }, 1)
      }

      tooltipWrapper.style.left = elem_props.left - (tooltipWrapper.offsetWidth / 2) + (elem_props.width / 2) + "px";
      if ((window.innerHeight - elem_props.top) < (tooltipWrapper.offsetHeight)) {
          tooltipWrapper.style.top = elem_props.top + top - tooltipWrapper.offsetHeight - 10 + "px";
      } else if ((window.innerHeight - elem_props.top) > (tooltipWrapper.offsetHeight)) {
          tooltipWrapper.style.top = elem_props.top + top + 35 + "px";
      }

      if ((elem_props.left + (elem_props.width / 2)) < (tooltipWrapper.offsetWidth / 2)) {
          tooltipWrapper.style.left = "10px";
      } else if ((document.body.clientWidth - elem_props.left - (elem_props.width / 2)) < (tooltipWrapper.offsetWidth / 2)) {
          tooltipWrapper.style.left = document.body.clientWidth - tooltipWrapper.offsetWidth - 20 + "px";
      }
    }
  }

  function setupListeners(linkElement) {
    linkElement.addEventListener('mouseleave', function(_event) {
      hideTooltip();
    });

    tooltipWrapper.addEventListener('mouseleave', function(_event) {
      hideTooltip();
    });

    linkElement.addEventListener('mouseenter', function(event) {
      clearTimeout(opacityTimeout);
      clearTimeout(contentTimeout);
      showTooltip(event);
    });

    tooltipWrapper.addEventListener('mouseenter', function(event) {
      clearTimeout(opacityTimeout);
      clearTimeout(contentTimeout);
    });
  }

  document.querySelectorAll('content a').forEach(setupListeners);
</script>
</body>

</html>